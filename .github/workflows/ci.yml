---
name: ci

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.gitignore'
  pull_request:
  workflow_dispatch:

env:
  go_version:     '1.19'
  linter_version: 'latest'
  linter_timeout: '5m'

jobs:
  test:
    needs: [ style, lint, reuse ]
    strategy:
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest', 'windows-latest' ]
        go: ['1.18', '1.19']
    runs-on: ${{ matrix.os }}
    name: Build & Test

    steps:
      - name: Setup go version
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go }}

      # Low dependencies means little value in caching, but here's where that
      # should happen if needed. :)

      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Make the workspace
        run: |
          go work init .
          go work use -r .

      - name: goschtalt -- Build & Test
        run: |
          go build ./...
          go test ./...

      - name: goschtalt -- Coverage
        if: |
          matrix.os == 'ubuntu-latest' &&
          matrix.go == env.go_version
        run: |
          go test -race -covermode=atomic -coverprofile=coverage.out ./...

      # Duplicated for each extension package.
      # Duplicated for each extension package.
      #
      # --- extensions/decoders/env

      - name: extensions/decoders/env -- Build & Test
        working-directory: ./extensions/decoders/env
        run: |
          go build ./...
          go test ./...

      - name: extensions/decoders/env -- Coverage
        working-directory: ./extensions/decoders/env
        if: |
          matrix.os == 'ubuntu-latest' &&
          matrix.go == env.go_version
        run: |
          go test -race -covermode=atomic -coverprofile=coverage.out ./...

      # --- extensions/decoders/json

      - name: extensions/decoders/json -- Build & Test
        working-directory: ./extensions/decoders/json
        run: |
          go build ./...
          go test ./...

      - name: extensions/decoders/json -- Coverage
        working-directory: ./extensions/decoders/json
        if: |
          matrix.os == 'ubuntu-latest' &&
          matrix.go == env.go_version
        run: |
          go test -race -covermode=atomic -coverprofile=coverage.out ./...

      # --- extensions/decoders/properties

      - name: extensions/decoders/properties -- Build & Test
        working-directory: ./extensions/decoders/properties
        run: |
          go build ./...
          go test ./...

      - name: extensions/decoders/properties -- Coverage
        working-directory: ./extensions/decoders/properties
        if: |
          matrix.os == 'ubuntu-latest' &&
          matrix.go == env.go_version
        run: |
          go test -race -covermode=atomic -coverprofile=coverage.out ./...

      # --- extensions/decoders/yaml

      - name: extensions/decoders/yaml -- Build & Test
        working-directory: ./extensions/decoders/yaml
        run: |
          go build ./...
          go test ./...

      - name: extensions/decoders/yaml -- Coverage
        working-directory: ./extensions/decoders/yaml
        if: |
          matrix.os == 'ubuntu-latest' &&
          matrix.go == env.go_version
        run: |
          go test -race -covermode=atomic -coverprofile=coverage.out ./...

      # --- extensions/encoders/yaml

      - name: extensions/encoders/yaml -- Build & Test
        working-directory: ./extensions/encoders/yaml
        run: |
          go build ./...
          go test ./...

      - name: extensions/encoders/yaml -- Coverage
        working-directory: ./extensions/encoders/yaml
        if: |
          matrix.os == 'ubuntu-latest' &&
          matrix.go == env.go_version
        run: |
          go test -race -covermode=atomic -coverprofile=coverage.out ./...

      # Upload the results of code coverage once

      - name: Send results to codecov.io
        if: |
          matrix.os == 'ubuntu-latest' &&
          matrix.go == env.go_version
        uses: codecov/codecov-action@v2
        with:
          flags: unittests
          files: >-
            ./coverage.out,
            ./extensions/decoders/env/coverage.out,
            ./extensions/decoders/json/coverage.out,
            ./extensions/decoders/properties/coverage.out,
            ./extensions/decoders/yaml/coverage.out,
            ./extensions/encoders/yaml/coverage.out

      # Update the results on goreportcard.com
      - name: Go report card
        if: |
          matrix.os == 'ubuntu-latest' &&
          matrix.go == env.go_version
        uses: creekorful/goreportcard-action@v1.0

  style:
    name: Check code style
    runs-on: [ 'ubuntu-latest' ]
    steps:
      - name: Setup go version
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go_version }}

      # Low dependencies means little value in caching, but here's where that
      # should happen if needed. :)

      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Run gofmt
        shell: bash
        run: |
          gofmt -d $(find . -path ./vendor -prune -o -name '*.go' -print) > fmt.patch
          # Error check & fail if any format mismatches are detected.
          if [ $(wc fmt.patch | awk '{print $1}') -ne 0 ]; then
            cat fmt.patch;
            exit 1;
          fi

  lint:
    name: Golint Checking
    runs-on: [ 'ubuntu-latest' ]
    steps:
      - name: Setup go version
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go_version }}

      # Low dependencies means little value in caching, but here's where that
      # should happen if needed. :)

      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Lint New Issues Only
        if: github.event_name == 'pull_request'
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.linter_version }}
          args: --timeout ${{ env.linter_timeout }}

      - name: Lint Entire Repo
        if: github.event_name != 'pull_request'
        uses: golangci/golangci-lint-action@v3
        with:
          version:  ${{ env.linter_version }}
          args: --timeout ${{ env.linter_timeout }}

  reuse:
    name: REUSE Checking
    runs-on: [ 'ubuntu-latest' ]
    steps: 
    - uses: actions/checkout@v2
    - name: REUSE Compliance Check
      uses: fsfe/reuse-action@v1

  # TODO - include the extensions better
  license:
    name: License Checking
    runs-on: [ 'ubuntu-latest' ]
    steps:
      - name: Setup go version
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.go_version }}

      # Low dependencies means little value in caching, but here's where that
      # should happen if needed. :)

      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Setup licensed
        uses: jonabc/setup-licensed@v1
        with:
         version: 3.x
      - run: go get ./...
      - run: licensed cache

      - name: Validate compliance
        run: |
          licensed status -f yaml > licensing.yml || true
          yq eval 'del(.apps[].sources[].dependencies[] | select(.allowed == "true") )' licensing.yml > disallowed.yml
          licensed status

      - name: Archive license results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: licensing
          path: |
            licensing.yml
            disallowed.yml

  release:
    name: Release
    needs: [ test, style, lint, reuse, license ]
    if: |
      contains( 'main', github.ref_name )
    runs-on: [ 'ubuntu-latest' ]
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate Release Version
        uses: xmidt-org/release-builder-action@v3
        id: prebundle
        with:
          gh-token: ${{ github.token }}
          dry-run: true

      - name: Generate Release Bundle and Release
        uses: xmidt-org/release-builder-action@v3
        id: bundle
        with:
          gh-token: ${{ github.token }}

      - name: Upload Release
        if:  steps.bundle.outputs.release-tag != ''
        uses: ncipollo/release-action@v1
        with:
          name: ${{ steps.bundle.outputs.release-name }}
          tag: ${{ steps.bundle.outputs.release-tag }}
          draft: false
          prerelease: false
          bodyFile: ${{ steps.bundle.outputs.release-body-file }}
          token: ${{ github.token }}
