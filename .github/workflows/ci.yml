---
name: ci

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'tools/**'
      - '**.md'
      - '.gitignore'
  pull_request:
  workflow_dispatch:

env:
  go_version:     '1.19'
  linter_version: 'latest'
  linter_timeout: '5m'

jobs:
  test:
    needs: [ style, lint, reuse ]
    strategy:
      matrix:
        os: [ 'ubuntu-latest', 'macos-latest', 'windows-latest' ]
        go: ['1.18', '1.19']
    runs-on: ${{ matrix.os }}
    name: Build & Test

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Setup go version
        uses: actions/setup-go@30b9ddff1180797dbf0efc06837929f98bdf7af7
        with:
          go-version: ${{ matrix.go }}
          cache: true

      - name: Make the workspace
        run: |
          go work init .
          go work use -r .

      - name: goschtalt -- Build & Test
        run: |
          go build ./...
          go test ./...

      - name: goschtalt -- Coverage
        if: |
          matrix.os == 'ubuntu-latest' &&
          matrix.go == env.go_version
        run: |
          go test -race -covermode=atomic -coverprofile=coverage.out ./...

      # Duplicated for each extension package.
      # Duplicated for each extension package.

      # --- extensions/cli/simple

      - name: extensions/cli/simple -- Build & Test
        working-directory: ./extensions/cli/simple
        run: |
          go build ./...
          go test ./...

      - name: extensions/cli/simple -- Coverage
        working-directory: ./extensions/cli/simple
        if: |
          matrix.os == 'ubuntu-latest' &&
          matrix.go == env.go_version
        run: |
          go test -race -covermode=atomic -coverprofile=coverage.out ./...

      # --- extensions/decoders/cli

      - name: extensions/decoders/cli -- Build & Test
        working-directory: ./extensions/decoders/cli
        run: |
          go build ./...
          go test ./...

      - name: extensions/decoders/cli -- Coverage
        working-directory: ./extensions/decoders/cli
        if: |
          matrix.os == 'ubuntu-latest' &&
          matrix.go == env.go_version
        run: |
          go test -race -covermode=atomic -coverprofile=coverage.out ./...

      # --- extensions/decoders/json

      - name: extensions/decoders/json -- Build & Test
        working-directory: ./extensions/decoders/json
        run: |
          go build ./...
          go test ./...

      - name: extensions/decoders/json -- Coverage
        working-directory: ./extensions/decoders/json
        if: |
          matrix.os == 'ubuntu-latest' &&
          matrix.go == env.go_version
        run: |
          go test -race -covermode=atomic -coverprofile=coverage.out ./...

      # --- extensions/decoders/properties

      - name: extensions/decoders/properties -- Build & Test
        working-directory: ./extensions/decoders/properties
        run: |
          go build ./...
          go test ./...

      - name: extensions/decoders/properties -- Coverage
        working-directory: ./extensions/decoders/properties
        if: |
          matrix.os == 'ubuntu-latest' &&
          matrix.go == env.go_version
        run: |
          go test -race -covermode=atomic -coverprofile=coverage.out ./...

      # --- extensions/decoders/yaml

      - name: extensions/decoders/yaml -- Build & Test
        working-directory: ./extensions/decoders/yaml
        run: |
          go build ./...
          go test ./...

      - name: extensions/decoders/yaml -- Coverage
        working-directory: ./extensions/decoders/yaml
        if: |
          matrix.os == 'ubuntu-latest' &&
          matrix.go == env.go_version
        run: |
          go test -race -covermode=atomic -coverprofile=coverage.out ./...

      # --- extensions/encoders/yaml

      - name: extensions/encoders/yaml -- Build & Test
        working-directory: ./extensions/encoders/yaml
        run: |
          go build ./...
          go test ./...

      - name: extensions/encoders/yaml -- Coverage
        working-directory: ./extensions/encoders/yaml
        if: |
          matrix.os == 'ubuntu-latest' &&
          matrix.go == env.go_version
        run: |
          go test -race -covermode=atomic -coverprofile=coverage.out ./...

      # Upload the results of code coverage once

      - name: Send results to codecov.io
        if: |
          matrix.os == 'ubuntu-latest' &&
          matrix.go == env.go_version
        uses: codecov/codecov-action@v3
        with:
          flags: unittests
          files: >-
            ./coverage.out,./extensions/cli/simple/coverage.out,./extensions/decoders/cli/coverage.out,./extensions/decoders/env/coverage.out,./extensions/decoders/json/coverage.out,./extensions/decoders/properties/coverage.out,./extensions/decoders/yaml/coverage.out,./extensions/encoders/yaml/coverage.out


  style:
    name: Check code style
    runs-on: [ 'ubuntu-latest' ]
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Setup go version
        uses: actions/setup-go@30b9ddff1180797dbf0efc06837929f98bdf7af7
        with:
          go-version: ${{ env.go_version }}
          cache: true

      - name: Run gofmt
        shell: bash
        run: |
          gofmt -d $(find . -path ./vendor -prune -o -name '*.go' -print) > fmt.patch
          # Error check & fail if any format mismatches are detected.
          if [ $(wc fmt.patch | awk '{print $1}') -ne 0 ]; then
            cat fmt.patch;
            exit 1;
          fi

  lint:
    name: Golint Checking
    runs-on: [ 'ubuntu-latest' ]
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Setup go version
        uses: actions/setup-go@30b9ddff1180797dbf0efc06837929f98bdf7af7
        with:
          go-version: ${{ env.go_version }}
          cache: true

      - name: Lint New Issues Only
        if: github.event_name == 'pull_request'
        uses: golangci/golangci-lint-action@v3
        with:
          version: ${{ env.linter_version }}
          args: --timeout ${{ env.linter_timeout }}

      - name: Lint Entire Repo
        if: github.event_name != 'pull_request'
        uses: golangci/golangci-lint-action@v3
        with:
          version:  ${{ env.linter_version }}
          args: --timeout ${{ env.linter_timeout }}

  reuse:
    name: REUSE Checking
    runs-on: [ 'ubuntu-latest' ]
    steps: 
    - uses: actions/checkout@v3

    - name: REUSE Compliance Check
      uses: fsfe/reuse-action@v1

  license:
    name: License Checking
    runs-on: [ 'ubuntu-latest' ]
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Setup go version
        uses: actions/setup-go@30b9ddff1180797dbf0efc06837929f98bdf7af7
        with:
          go-version: ${{ env.go_version }}
          cache: true

      - name: Setup licensed
        uses: jonabc/setup-licensed@v1
        with:
         version: 3.x

      - name: Validate compliance
        run: |
          list=(`find . -name go.mod`)

          mkdir -p licensed

          for i in "${list[@]}"
          do
              d=`dirname $i`
              fn=$(echo "$d" | sed -e 's/[\/\.]/_/g')
              if [ "$d" != "." ]; then
                cp .licensed.yml $d/.licensed.yml
              else
                fn='goschtalt'
              fi
              pushd $d
              echo "Examining: $d"
              go get ./...
              licensed cache
              licensed status -f yaml > licensing.yml || true
              yq eval 'del(.apps[].sources[].dependencies[] | select(.allowed == "true") )' licensing.yml > disallowed.yml
              licensed status
              popd
              mv $d/licensing.yml  "licensed/${fn}_licensing.yml"
              mv $d/disallowed.yml "licensed/${fn}_disallowed.yml"
          done

      - name: Archive license results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: licensing
          path: |
            licensed/**.yml

  goreportcard:
    name: Update goreportcard.com
    runs-on: [ 'ubuntu-latest' ]
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      # Update the results on goreportcard.com
      - name: Go report card
        run: |
          list=(`find . -name go.mod`)

          for i in "${list[@]}"
          do
              d=`dirname $i`
              path=$(echo "$d" | sed -e 's/[\.]//')
              echo "Processing: 'github.com/${{ github.repository }}${path}'"
              curl -s -o /dev/null -w "HTTP Status: %{http_code}\n" -X POST -F "repo=github.com/${{ github.repository }}${path}" https://goreportcard.com/checks
          done

  release:
    name: Release
    needs: [ test, style, lint, reuse, license ]
    if: |
      contains( 'main', github.ref_name )
    runs-on: [ 'ubuntu-latest' ]
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate Release Version
        uses: xmidt-org/release-builder-action@v3
        id: prebundle
        with:
          gh-token: ${{ github.token }}
          dry-run: true

      - name: Generate Release Bundle and Release
        uses: xmidt-org/release-builder-action@v3
        id: bundle
        with:
          gh-token: ${{ github.token }}

      - name: Upload Release
        if:  steps.bundle.outputs.release-tag != ''
        uses: ncipollo/release-action@v1
        with:
          name: ${{ steps.bundle.outputs.release-name }}
          tag: ${{ steps.bundle.outputs.release-tag }}
          draft: false
          prerelease: false
          bodyFile: ${{ steps.bundle.outputs.release-body-file }}
          token: ${{ github.token }}
